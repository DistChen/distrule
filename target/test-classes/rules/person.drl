//规则文件所属的包，这只是一个逻辑上的路径，并无实际作用，只是为了保持完整的目录结构信息
package rules

// 导入规则文件所依赖的外部对象
import dist.common.rules.define.RuleObject
import model.Person
import java.util.Date
import java.util.List
import org.w3c.dom.Document
import org.w3c.dom.Element

//导入外部静态方法
import function dist.common.rules.define.CommonUtil.println;

global Person personTest;

declare Address
    city:String
    code:Integer
    mail:String
end

query "count"
    RuleObject(source!=null)
end


//在规则文件当中定义的函数
function Element createElement(Document document,Person person){
    Element element=document.createElement("person");
    element.setAttribute("name",person.getName());
    element.setAttribute("birth",person.getBirth().toLocaleString());
    return element;
}

//某一个规则，这个规则叫做 rule1
//同一个规则文件当中可以存在多个不同名称的规则
rule "rule1"
    enabled true
    salience 1 //规则执行的优先级，因为同一个规则文件当中能存在多个规则，那么必须有一个执行顺序，这个顺序通过 salience 值确定，值越大，优先级越高
    no-loop true//当传进来的fact 对象改变之后，是否继续重新执行规则
    when
      obj:RuleObject(source!=null,source instanceof List, personTest!=null) //规则执行的条件
    then
      println("chen yan ping");//使用导入的函数
      List<Person> list=(List<Person>) obj.getSource();
      list.add(personTest);
      try {
           Document document=dist.common.rules.define.CommonUtil.createDocument();
           Element root=document.createElement("tree");
           for(Person person:list){
               root.appendChild(createElement(document,person));
           }
           document.appendChild(root);
           obj.setResult(dist.common.rules.define.CommonUtil.XMLToString(document));
      } catch (Exception e) {
           e.printStackTrace();
      }
end


rule "rule"
    when
        eval(true)
    then
        Address addr=new Address();
        addr.setCity("北京");
        addr.setCode(100);
        addr.setMail("020243");
        println(addr.getCity()+"/"+addr.getCode()+"/"+addr.getMail());
end